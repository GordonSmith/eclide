project ( ECLIDE )
cmake_minimum_required (VERSION 2.8)

IF ( WIN32 )
    SET ( EXECUTABLE_OUTPUT_PATH "${CMAKE_BINARY_DIR}/../bin/${CMAKE_BUILD_TYPE}" )
    SET ( LIBRARY_OUTPUT_PATH "${CMAKE_BINARY_DIR}/../bin/${CMAKE_BUILD_TYPE}" )
ELSE ( WIN32 )
    SET ( EXECUTABLE_OUTPUT_PATH "/usr/lib/mozilla/plugins" )
    SET ( LIBRARY_OUTPUT_PATH "/usr/lib/mozilla/plugins" )
ENDIF ( WIN32 )

MACRO(ADD_MSVC_PRECOMPILED_HEADER PrecompiledHeader PrecompiledSource SourcesVar)
  IF(MSVC)
    GET_FILENAME_COMPONENT(PrecompiledBasename ${PrecompiledHeader} NAME_WE)
    SET(PrecompiledBinary "$(IntDir)/${PrecompiledBasename}.pch")
    SET(Sources ${${SourcesVar}})

    SET_SOURCE_FILES_PROPERTIES(${PrecompiledSource}
    				PROPERTIES COMPILE_FLAGS "/Yc\"${PrecompiledHeader}\" /Fp\"${PrecompiledBinary}\""
    					OBJECT_OUTPUTS "${PrecompiledBinary}")
    SET_SOURCE_FILES_PROPERTIES(${Sources}
    				PROPERTIES COMPILE_FLAGS "/Yu\"${PrecompiledHeader}\" /FI\"${PrecompiledHeader}\" /Fp\"${PrecompiledBinary}\""
    					OBJECT_DEPENDS "${PrecompiledBinary}") 
    # Add precompiled header to SourcesVar
    LIST(APPEND ${SourcesVar} ${PrecompiledSource})
    LIST(APPEND ${SourcesVar} ${PrecompiledHeader})
  ENDIF(MSVC)
ENDMACRO(ADD_MSVC_PRECOMPILED_HEADER)

if ("${EXTERNALS_DIRECTORY}" STREQUAL "")
	set (EXTERNALS_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/../../HPCC/dev/Third_party")
endif()

SET( BOOST_ROOT "${EXTERNALS_DIRECTORY}/boost" )
SET( Boost_ADDITIONAL_VERSIONS "1.44" "1.43" "1.43.0" "1.42" "1.42.0" )
SET( Boost_USE_STATIC_LIBS ON )
#FIND_PACKAGE( Boost 1.44 COMPONENTS thread date_time )
FIND_PACKAGE( Boost 1.44 )
IF( Boost_FOUND )
ELSE( Boost_FOUND )
    MESSAGE( "BOOST libraries were not found:  " ${BOOST_ROOT})
ENDIF( Boost_FOUND )

if (WIN32)
	ADD_DEFINITIONS( -D_CRT_SECURE_NO_WARNINGS -DUNICODE -D_UNICODE )
ELSE (WIN32)

ENDIF (WIN32)
SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)
#add_subdirectory ( AMT )
#add_subdirectory ( boost_bgl )
add_subdirectory ( clib )
add_subdirectory ( comms )
#add_subdirectory ( cpptooltip )
#add_subdirectory ( dockingwindows )
add_subdirectory ( EclLib )
#add_subdirectory ( EclNet )
#add_subdirectory ( ECLNetCtl )
#add_subdirectory ( EditLog )
#add_subdirectory ( EntityExtraction )
add_subdirectory ( en_us )
#add_subdirectory ( FileSyncAndSpray )
#add_subdirectory ( GraphicalQueryBuilder )
add_subdirectory ( GraphViewCtl )
#add_subdirectory ( GraphViewCtlManaged )
#add_subdirectory ( GrETL )
#add_subdirectory ( htmlContainer )
#add_subdirectory ( LNBand )
#add_subdirectory ( MTreeTest )
#add_subdirectory ( Navigation_Sidebar )
#add_subdirectory ( npGraphViewCtl )
#add_subdirectory ( nplngraphview )
add_subdirectory ( eclide )
#add_subdirectory ( RoxieDebugger )
add_subdirectory ( sgrid )
#add_subdirectory ( tabctrls )
add_subdirectory ( wlib )
#add_subdirectory ( wtlex )
#add_subdirectory ( WtlTimeLine )

